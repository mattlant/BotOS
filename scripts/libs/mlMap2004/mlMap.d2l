//##################################################
//######   Matts Map and Pathing Library    ########
//##################################################
/*
----------------------------------------------------*/
var mlMapVersion = 3.0;
/*----------------------------------------------------
Copyright (C) 2003 Matt Lanteigne aka mattlant <mattlant@hotmail.com>

Thanks go out to Knaar, who started the whole thing with his initial d2Map
that i used as a template. The code to access collision info has been added
to the core now, but still Knaar deserves a lot of credit here. If it
wasnt for him, i would never have been led down this path (no pun intended)
Thanks to Wolf for the collision info
Thanks to Gshock for some EXCELLENT ideas
Thanks to Darien for a great amount of testing
Thanks to Froggy for pointing out some stuff that i screwed up
BIG THANKS to TDW for some thoughts and ideas on area linkage
----------------------------------------------------

This program is free software; You can redistrubute freely as long as this
header stays intact. Modifications may be done as long as original header
and credits stay.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY
or FITNESS FOR A PARTICULAR PURPOSE.
----------------------------------------------------
*/


if(typeof(BotOS) != 'function'){
	var BotOS = function () {
		throw new NamespaceException("BotOS Cannot be instantiated", 1, "mlMap.d2l");
	}
}
BotOS.Pathing = function () {
	throw new NamespaceException("BotOS.Pathing Cannot be instantiated", 1, "mlMap.d2l");
}


//include dependant files
print("Including mlGeneral");
include("mlGeneral.d2l");

print("Including mlHeap");
include("mlheap.d2l");

print("Including mlLog");
include("mlLog.d2l");

print("Including mlExceptions");
include("mlExceptions.d2l");

print("Including Constants");
include("mlmap2004/Constants.d2l");

print("Including MapObjects");
include("mlmap2004/MapObjects.d2l");

print("Including Area");
include("mlmap2004/Area.d2l");

print("Including Room");
include("mlmap2004/Room.d2l");

print("Including Map");
include("mlmap2004/Map.d2l");

print("Including MapManager");
include("mlmap2004/MapManager.d2l");

print("Including Pather");
include("mlmap2004/Pather.d2l");

print("Including Mover");
include("mlmap2004/Mover.d2l");

print("Including AreaLinkage");
include("mlmap2004/AreaLinkage.d2l");

print("Including MapCacher");
include("mlmap2004/MapCacher.d2l");

print("Including Pathable");
include("mlMap2004/Pathable.d2l");

//Create a log for debugging, etc
BotOS.Pathing.Log = new oLogSingle("output/mlMap.log", 0, 0);
BotOS.Pathing.Log.InitializeLog();
BotOS.Pathing.Log.Write("mlMap Log Initialized", boLOGINFO);

//////////////////////////////////////////////////////////////////////
// LIBRARY GLOBAL VARIABLES
// TO BE PHASED OUT
// -------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
var mlMapMSGDelay = 100;
var watched = false;

var pathhop = null;
var walkdel = 150;
//var RandomMove = 1;
//var RandomMoveDel = 10;

/*
var mldebugdelay = 0;
var mldebuglevel=2;
var mldebuglog="output/mlMapold.log";
*/


//////////////////////////////////////////////////////////////////////
// Static Utility Functions
// -------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
/*
bit 0 : block walk - 1
bit 1 : block light - 2
bit 2 : Block LOS (block jump too) - 4
bit 3 : block Player's walk but not Mercenary's walk (weird) - 8
bit 4 : ? - 16
bit 5 : block light only (not LOS) ?  - 32
bit 6 : ?
bit 7 : ?
*/
//////////////////////////////////////////////////////////////////////
// LOS(_x1, _y1, _x2, _y2, _cutoff, _coll, _unit)
// -------------------------------------------------------------------
// returns: true if there is line of sight
//////////////////////////////////////////////////////////////////////
BotOS.Pathing.CheckLOS function (Ax, Ay, Bx, By, _cutoff, _coll, _unit)
{
	var _bit = 4;
	if(_coll) _bit = _coll;

	_cutoff = (_cutoff > 45) ? 45 : _cutoff;

	if(_cutoff && this.euclidian(Ax, Ay, Bx, By) > _cutoff) return false;

	return 	checkCollision(me.area, Ax, Ay, 2, Bx, By, 2, _bit);
;
}

//////////////////////////////////////////////////////////////////////
// getSafeOffScreenXY(_x1, _y1, _x2, _y2)
// -------------------------------------------------------------------
// returns: a safe x,y
// for example: If you have a monster way off screen, but you want to
// target it anyways, you can pass the monsters x,y to this function,
// and it will give you safe coordinates to target so your ranged weapon
// will still hit (if the monster hasnt moved :D )
// THANKS TO BRESENHAM
//////////////////////////////////////////////////////////////////////
BotOS.Pathing.getSafeOffScreenXY function (Ax, Ay, Bx, By, _cutoff, _closestwalkable, _multi)
{
	//if(this.euclidian(me.x, me.y, Ax, Ay) < 60 && this.euclidian(me.x, me.y, Bx, By) < 60) {

	if(!_cutoff) _cutoff = 20;

	if(!_multi) _multi = 1;

	var Ox = Ax, Oy = Ay;

	var dX = Math.abs(Bx-Ax)*_multi;
	var dY = Math.abs(By-Ay)*_multi;

	var Xincr, Yincr;

	if (Ax > Bx) { Xincr=-1; } else { Xincr=1; }
	if (Ay > By) { Yincr=-1; } else { Yincr=1; }

	if (dX >= dY){
		var dPr 	= dY<<1;
		var dPru 	= dPr - (dX<<1);
		var P 		= dPr - dX;
		for (; dX>=0; dX--)	{
			if (this.euclidian(Ox, Oy, Ax, Ay) > _cutoff) {
				if(_closestwalkable) return FindClosestWalkable(Ax, Ay);
				else return {x:Ax, y:Ay};
			}
			if (P > 0){
				Ax += Xincr;
				Ay += Yincr;
				P  += dPru;
			}
			else{
				Ax+=Xincr;
				P+=dPr;
			}
		}
	}
	else{
		var dPr 	= dX<<1;
		var dPru 	= dPr - (dY<<1);
		var P 		= dPr - dY;
		for (; dY>=0; dY--)	{
			if (this.euclidian(Ox, Oy, Ax, Ay) > _cutoff) {
				if(_closestwalkable) return FindClosestWalkable(Ax, Ay);
				else return {x:Ax, y:Ay};
			}
			if (P > 0){
				Ax+=Xincr;
				Ay+=Yincr;
				P+=dPru;
			}
			else{
				Ay+=Yincr;
				P+=dPr;
			}
		}
	}
	return {x:Bx, y:By};
}

//////////////////////////////////////////////////////////////////////
// FindClosestWalkable(_x, _y)
// -------------------------------------------------------------------
// returns: coordinate of closest walkable
// TODO: Optimize :D
//////////////////////////////////////////////////////////////////////
BotOS.Pathing.FindClosestWalkable function (x, y)
{

//     if ( !this.IsInRange(x, y) )
//     {
//         return false;
//     }
	if ( IsWalkable(x,y) )
	{
		return {x:x, y:y};
	}

	var dist = 0;
	while ( 1 )
	{
		for ( var vy = -1-dist; vy < 2+dist; vy++ )
		{
			for ( var vx = -1-dist; vx < 2+dist; vx++ )
			{
				if ( IsWalkable(x+vx, y+vy) )
				{
					return {x:x+vx, y:y+vy};
				}
			}
		}
		dist++;
	}
}

function IsWalkable(_x, _y)
{
	return !(checkCollision(me.area, _x, _y, 1));

}

//////////////////////////////////////////////////////////////////////
// getLevelDimensions(area) 
// -------------------------------------------------------------------
// returns: The dimensions of the given area number
//////////////////////////////////////////////////////////////////////
BotOS.Pathing.getLevelDimensions function (area) 
{
	var minx = Number.MAX_VALUE, maxx = 0, miny = Number.MAX_VALUE, maxy = 0;

	var troom = getRoom(area);

	do 
	{
		if (troom.x*5 > maxx) 
		{
			maxx = troom.x*5;
		}
		if (troom.y*5 > maxy) 
		{
			maxy = troom.y*5;
		}
		if (troom.x*5 < minx) 
		{
			minx = troom.x*5;
		}
		if (troom.y*5 < miny) 
		{
			miny = troom.y*5;
		}
	} while(troom.getNext());

	return {minx:minx, maxx:maxx, miny:miny, maxy:maxy};
}

//#################
//Utility Functions OLD
//#################
function mlinitdebuglog()
{
	var debugfile = fileOpen(mldebuglog, 1);
	debugfile.writeLine("Debug Initialized");
	debugfile.close();
}

function mlprint(string)
{
	if (mldebuglevel > 0)
	{
		var debugfile = fileOpen(mldebuglog, 2);
		debugfile.writeLine(string);
		debugfile.close();
	}
	if (mldebuglevel > 1)
	{
		print(string);
		delay(mldebugdelay);
	}
}

function mlCast(which,usehand,x,y)
{
	if(!usehand) usehand = 0;

	me.setSkill(which,usehand);
	var count=0;
	while(1) {
		if(me.getSkill(usehand) == which) break;
		delay(20);
		count++;
		if(count>50) {
			print("Could not set skill");
			return false;
		}
	}

	switch(arguments.length)
	{
		case 0: break;
		case 2: me.useSkill(usehand); break;
		case 3:	x.useSkill(usehand);
			break;
		case 4: me.useSkillAt(x,y,usehand); break;
	}
	var mcheck=mlModeWait();
	while (me.mode==mcheck)
	{
		if(x)
		{
			if (x.hp <= 0) return true;
		}
		delay(10);
	}
	return true;
}

function mlModeWait()
{
	for (var qw = 1; qw <= 20; qw++)
	{
		var mymode = me.mode;
		if (mymode==7 || mymode==8 || (mymode>9 && mymode<19)) return mymode;
		delay(20);
	}
	return 10;
}

function mlgetClosestObject(x, y, r, n, s) {
	if (arguments.length < 4)
	{
		n = null;
		s = null;
	}
	var closest_dist = r; var obj_id = 0;
	var obj = getUnit(2, n, s);
	var p;
	var dist;
	
	if (obj) do {
			p = obj.getParent();
			if (!p || p.name != me.name) {
				dist = mlDist(obj.x, obj.y, x, y);
				if (dist <= closest_dist) {
					closest_dist = dist;
					obj_id = obj.id
				}
			}
	}while(obj && obj.getNext(n));
	// - skip this if no objs found
	if (obj_id)
	{
		obj = getUnit(2, n, s);
		if (obj) do {
				p = obj.getParent();
				if (!p || p.name != me.name) {
					if (obj.id == obj_id) {
						return obj;
					}
				}
		}while(obj && obj.getNext());
		print("Close object not on 2nd detect");
	}
	return false;
}

function mlDist(x1, y1, x2, y2) {
	return Math.floor(Math.sqrt(mlDist2(x1, y1, x2, y2))); }

function mlDist2(x1, y1, x2, y2) {
	return Math.floor((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)); }

function mlInTown(unit) {
	switch(unit.area) {
		case 1: case 40: case 75: case 103: case 109: return true;
		default: return false;
	}
}



function getAngle(x1, y1, x2, y2) {
	return Math.floor((Math.atan2(y2-y1 , x2-x1)) * 180 / 3.1415);
}



//thanks scav, njag
function mlmemove(x, y)
{
	if(parseFloat(me.version) >= 0.33)
		clickMap(0, 0, x, y);
	else
		me.move(x, y);

	var xoff = parseInt(rnd(0,12)/6) * (x - me.x<0 ? -1 : 1);
	var yoff = parseInt(rnd(0,12)/6) * (y - me.y<0 ? -1 : 1);
	delay(rnd(10,50));
	if(parseFloat(me.version) >= 0.33)
		clickMap(2, 0, x+xoff, y+yoff);
	else
		me.move(x+xoff, y+yoff);
}


