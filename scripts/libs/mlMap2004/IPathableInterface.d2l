
//////////////////////////////////////////////////////////////////////
// Properties and Methods for IPathable Interface
// As long as this interface is implemented, you can pass the object
// to the Pather
// -------------------------------------------------------------------
// Properties are a little harder to implement :(
//////////////////////////////////////////////////////////////////////
// Properties
//////////////////////////////////////////////////////////////////////
// CollisionData[y][x]
// x - this is the low x coordinate
// y - this is the low y coordinate
// MaxX - this is the high x coordinate
// MaxY - this is the High y coordinate
// Width - this is the width of the CollisionData
// Height - this is the Height of the CollisionData
// Name - A Name given to the object. Used for DUmping Collision Data
// and other misc tasks
//////////////////////////////////////////////////////////////////////
// Methods
//////////////////////////////////////////////////////////////////////
// IPathable.IsInRange(_x, _y)
// -------------------------------------------------------------------
// Used to Check if a coord is within the COllisionData's Limits
// _x and _y define the coords
//////////////////////////////////////////////////////////////////////
function IPathable_IsInRange(_x, _y) 
{
	return !(_x > this.MaxX || _x < this.x || _y > this.MaxY || _y < this.y)
}

//////////////////////////////////////////////////////////////////////
// IPathable.IsWalkable(_x, _y)
// -------------------------------------------------------------------
// returns: true if walkable else false
// Acts upon an inplementation of IPathable's CollisionData
//////////////////////////////////////////////////////////////////////
function IPathable_IsWalkable(_x, _y)
{
	if ( !this.IsInRange(_x, _y) )
		return false;
	return !(this.CollisionData[_y-this.y][_x-this.x] & 1);

}

//////////////////////////////////////////////////////////////////////
// IPathable.FindClosestWalkable(_x, _y)
// -------------------------------------------------------------------
// returns: coordinate of closest walkable
// requires an initialized map
// TODO: Optimize :D
//////////////////////////////////////////////////////////////////////
function IPathable_FindClosestWalkable(x, y)
{
	if ( this.IsWalkable(x,y) )
	{
		return {x:x, y:y};
	}

	var dist = 0;
	while ( 1 )
	{
		for ( var vy = -1-dist; vy < 2+dist; vy++ )
		{
			for ( var vx = -1-dist; vx < 2+dist; vx++ )
			{
				if ( this.IsWalkable(x+vx, y+vy) )
				{
					return {x:x+vx, y:y+vy};
				}
			}
		}
		dist++;
	}
}

//////////////////////////////////////////////////////////////////////
// oMap.LOS(_x1, _y1, _x2, _y2)
// -------------------------------------------------------------------
// returns: true if there is line of sight
// requires an initialized map
// THANKS TO BRESENHAM
//////////////////////////////////////////////////////////////////////


function IPathable_LOS(Ax, Ay, Bx, By, _cutoff, _coll, _unit)
{
	if(!this.IsInRange(Ax, Ay))
		return false;
	if(!this.IsInRange(Bx, By))
		return false;

	var _bit = 4;
	if(_coll) _bit = 1;

	if(_cutoff && this.euclidian(Ax, Ay, Bx, By) > _cutoff) return false;

	var dX = Math.abs(Bx-Ax);
	var dY = Math.abs(By-Ay);

	var Xincr, Yincr;

	if (Ax > Bx) { Xincr=-1; } else { Xincr=1; }
	if (Ay > By) { Yincr=-1; } else { Yincr=1; }

	if (dX >= dY){
		var dPr 	= dY<<1;
		var dPru 	= dPr - (dX<<1);
		var P 		= dPr - dX;
		for (; dX>=0; dX--)	{
			if (this.CollisionData[Ay-this.y][Ax-this.x] & _bit || this.CollisionData[Ay-this.y][Ax-this.x] & 0x400000)
				return false;
			if(_unit) {
				for(var ux = -1; ux < 2; ux++) {
					for(var uy = -1; uy < 2; uy++) {
						if(_unit.x == (Ax+ux) && _unit.y == (Ay+uy))
						return false;
					}
				}
			}

			if (P > 0){
				Ax+=Xincr;
				Ay+=Yincr;
				P+=dPru;
			}
			else{
				Ax+=Xincr;
				P+=dPr;
			}
		}
	}
	else{
		var dPr 	= dX<<1;
		var dPru 	= dPr - (dY<<1);
		var P 		= dPr - dY;
		for (; dY>=0; dY--)	{
			if (this.CollisionData[Ay-this.y][Ax-this.x] & _bit || this.CollisionData[Ay-this.y][Ax-this.x] & 0x400000)
				return false;
			if(_unit) {
				for(var ux = -1; ux < 2; ux++) {
					for(var uy = -1; uy < 2; uy++) {
						if(_unit.x == (Ax+ux) && _unit.y == (Ay+uy))
						return false;
					}
				}
			}
			if (P > 0){
				Ax+=Xincr;
				Ay+=Yincr;
				P+=dPru;
			}
			else{
				Ay+=Yincr;
				P+=dPr;
			}
		}
	}
	return true;
}

//////////////////////////////////////////////////////////////////////
// IPathable.Dump(_type, _bit)
// -------------------------------------------------------------------
// Used to Dump the map
// _type = 0 for Hex dump, 1 for visual dump
// _bit is used during visual to dump a particular bit when in visual
// mode
//////////////////////////////////////////////////////////////////////
function IPathable_Dump (_type, _bit) {
	var line = "";
	var bit = 0x1 << _bit;

	var tname = this.Name?this.Name:"NoName";

	var hFile = fileOpen("output/CollisionDumps/CollisionDataDump-" + tname + ".txt", 1);
	if(!_type) {
		for (var y = 0; y < this.Height; y++) {
			for (var x = 0; x < this.Width; x++) {
				if(this.CollisionData[y][x] != undefined)
					line += "0x" + this.CollisionData[y][x].toString(16) + " ";
				else line += "0xFFFF ";
			}
			hFile.writeLine(line);
			line = "";
		}
	}
	else if(_type == 1) {
		for (var y = 0; y < this.Height; y++) {
			line+=((this.y+y).toString(10));
			for (var x = 0; x < this.Width; x++) {

				if(this.CollisionData[y][x] & 0x400000)
					line += "D";
				else if(this.CollisionData[y][x] & bit)
					line += "X";
				else if(this.CollisionData[y][x] & 0x10000)
					line += "1";
				else if(this.CollisionData[y][x] & 0x20000)
					line += "2";
				else if(this.CollisionData[y][x] & 0x40000)
					line += "3";
				else if(this.CollisionData[y][x] & 0x80000)
					line += "4";
//					else if(this.CollisionData[y][x] & 0x100000)
//						line += "+";
//					else if(this.CollisionData[y][x] & 0x200000)
//						line += "-";
				else
					line += ".";

			}
			hFile.writeLine(line);
			line = "";
		}
	}

	hFile.close();
}





