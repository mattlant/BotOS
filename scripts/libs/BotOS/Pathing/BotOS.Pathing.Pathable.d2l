

//##################################################
//####   Matts Pathing Framework Library 3.0   #####
//####     Part of the BotOS framework         #####
//##################################################
/*

Copyright (C) 2003-2004 Matt Lanteigne aka mattlant <mattlant@hotmail.com>

----------------------------------------------------

This is free software; You can redistrubute freely as long as this
header stays intact. Modifications for personal use may be made. Modifications
for distribution to others is prohibited without written consent from
the author.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY
or FITNESS FOR A PARTICULAR PURPOSE.

Any and all code is subject to change at any time.
----------------------------------------------------


Thanks go out to Knaar, who started the whole thing with his initial d2Map
that i used as a template. The code to access collision info has been added
to the core now, but still Knaar deserves a lot of credit here. If it
wasnt for him, i would never have been led down this path (no pun intended)
Thanks to Wolf for the collision info
Thanks to Gshock for some EXCELLENT ideas
Thanks to Darien for a great amount of testing
Thanks to Froggy for pointing out some stuff that i screwed up
BIG THANKS to TDW for some thoughts and ideas on area linkage
----------------------------------------------------


If you appreciate our work, please donate :)

https://www.paypal.com/xclick/business=mattlant%40rogers.com&item_name=mattlant+Donations&no_note=1&tax=0&currency_code=USD


----------------------------------------------------
*/


//////////////////////////////////////////////////////////////////////
// Properties and Methods for abstract Pathable base Class
// As long as this class is inherited and implemented, you can pass 
// the object to the Pather
//////////////////////////////////////////////////////////////////////
// Properties
//////////////////////////////////////////////////////////////////////
// CollisionData[y][x]
// x - this is the low x coordinate
// y - this is the low y coordinate
// MaxX - this is the high x coordinate
// MaxY - this is the High y coordinate
// Width - this is the width of the CollisionData
// Height - this is the Height of the CollisionData
// Name - A Name given to the object. Used for DUmping Collision Data
// and other misc tasks
//////////////////////////////////////////////////////////////////////
// Methods

include("BotOS/BotOS.Logging.d2l");

if(typeof(BotOS) != 'function'){
	BotOS = function () {
		throw new BotOS.NamespaceException("BotOS Cannot be instantiated", 1, "mlMap.d2l");
	}
}
if(typeof(BotOS.Pathing) != 'function') {
	BotOS.Pathing = function () {
		throw new BotOS.NamespaceException("BotOS.Pathing Cannot be instantiated", 1, "mlMap.d2l");
	}
}

BotOS.Pathing.Pathable = function (_info) {

	if(!_info) _info = new Object();

	if(!_info.Name) 
		this.Name = "NotSet";

	this.CollisionData = null;
	this.x = Number.MAX_VALUE;
	this.y = Number.MAX_VALUE;
	this.MaxX = 0;
	this.MaxY = 0;
	this.Width = 0;
	this.Height = 0;
	this.IsInitialized = false;
	this.Name = _info.Name;
	this.InitializationTime = 0;
	
	this.Logger = null;

	this.Rooms = new Array();

	this.NorthExit = 0;
	this.EastExit = 0;
	this.SouthExit = 0;
	this.WestExit = 0;

	//Override with your own implementation
	this.Initialize = function () { 
		throw new BotOS.NotImplementedException("BotOS.Pathing.Pathable.Initialize -> This function needs to be overridden and implemented.", 1, "Pathable.d2l");
	} 
	
	this.Logger = _info.Logger;

}

//Keep light so we want to prototype all Methods
BotOS.Pathing.Pathable.prototype.Dump = Pathable_Dump;									//Override if you need/want your own functionality
BotOS.Pathing.Pathable.prototype.LOS = Pathable_LOS;										//Override if you need/want your own functionality
BotOS.Pathing.Pathable.prototype.SetExits = Pathable_SetExits;							//Override if you need/want your own functionality
BotOS.Pathing.Pathable.prototype.SetLogger = Pathable_SetLogger;
BotOS.Pathing.Pathable.prototype.IsInRange = Pathable_IsInRange;							//Override if you need/want your own functionality
BotOS.Pathing.Pathable.prototype.IsWalkable = Pathable_IsWalkable;						//Override if you need/want your own functionality
BotOS.Pathing.Pathable.prototype.FindClosestWalkable = Pathable_FindClosestWalkable;		//Override if you need/want your own functionality
BotOS.Pathing.Pathable.prototype.TransferCollData = Pathable_TransferCollData;			//Override if you need/want your own functionality
BotOS.Pathing.Pathable.prototype.GetRooms = Pathable_GetRooms;			//Override if you need/want your own functionality

//////////////////////////////////////////////////////////////////////
// BotOS.Pathing.Pathable.IsInRange(_x, _y)
// -------------------------------------------------------------------
// Used to Check if a coord is within the COllisionData's Limits
// _x and _y define the coords
//////////////////////////////////////////////////////////////////////
function Pathable_SetLogger (_logger) {
	if(this.Logger instanceof BotOS.Logging.Log) {
		this.Logger = _logger;
	}
	else {
		throw new BotOS.ArgumentException("BotOS.Pathing.Pathable.SetLogger -> Invalid Logger passed. Needs an instance of BotOS.Logging.Log.", 1, "Pathable.d2l");
	}
}
//////////////////////////////////////////////////////////////////////
// BotOS.Pathing.Pathable.IsInRange(_x, _y)
// -------------------------------------------------------------------
// Used to Check if a coord is within the COllisionData's Limits
// _x and _y define the coords
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
function Pathable_IsInRange(_x, _y) 
{
	return !(_x > this.MaxX || _x < this.x || _y > this.MaxY || _y < this.y)
}


//////////////////////////////////////////////////////////////////////
// BotOS.Pathing.Pathable.IsWalkable(_x, _y)
// -------------------------------------------------------------------
// returns: true if walkable else false
// Acts upon an inplementation of IPathable's CollisionData
//////////////////////////////////////////////////////////////////////
function Pathable_IsWalkable(_x, _y)
{
	if ( !this.IsInRange(_x, _y) )
		return false;

	return !(this.CollisionData[_y-this.y][_x-this.x] & 1);

}

//////////////////////////////////////////////////////////////////////
// BotOS.Pathing.Pathable.FindClosestWalkable(_x, _y)
// -------------------------------------------------------------------
// returns: coordinate of closest walkable
// requires an initialized map
// TODO: Optimize :D
//////////////////////////////////////////////////////////////////////
function Pathable_FindClosestWalkable(x, y)
{
	if(arguments.length < 2 || isNaN(x) || isNaN(y)) {
		throw new BotOS.ArgumentException("BotOS.Pathing.Pathable.FindClosestWalkable -> Needs at least 2 arguments or invalid args passed", 1, "Pathable.d2l");
	}
	if ( this.IsWalkable(x,y) )
	{
		return {x:x, y:y};
	}
	if ( !this.IsInRange(x, y) )
		throw new BotOS.ArgumentException("BotOS.Pathing.Pathable.FindClosestWalkable -> Provided coordinates are not in range", 1, "Pathable.d2l");

	var dist = 1;
	while ( 1 )
	{
		for ( var vy = -dist; vy < dist; vy++ )
		{
			for ( var vx = -dist; vx < dist; vx++ )
			{
				if ( this.IsWalkable(x+vx, y+vy) )
				{
					return {x:x+vx, y:y+vy};
				}
			}
		}
		dist++;
		if(dist > 100) {
			throw new BotOS.ArgumentException("BotOS.Pathing.Pathable.FindClosestWalkable -> Could not find a closest walkable", 1, "Pathable.d2l");
		}
	}
}

//////////////////////////////////////////////////////////////////////
// BotOS.Pathing.Pathable.LOS(_x1, _y1, _x2, _y2)
// -------------------------------------------------------------------
// returns: true if there is line of sight
// requires an initialized map
// THANKS TO BRESENHAM
//////////////////////////////////////////////////////////////////////


function Pathable_LOS(Ax, Ay, Bx, By, _cutoff, _coll, _unit)
{
	if(arguments.length < 4 || isNaN(Ax) || isNaN(Ay) || isNaN(Bx) || isNaN(By)) {
		throw new BotOS.ArgumentException("BotOS.Pathing.Pathable_LOS -> Needs at least 4 arguments or invalid arguments passed", 1, "Pathable.d2l");
	}
	if(!this.IsInRange(Ax, Ay))
		return false;
	if(!this.IsInRange(Bx, By))
		return false;

	var _bit = 4;
	if(_coll) _bit = 1;

	if(_cutoff && BotOS.Pathing.Pather.Euclidian(Ax, Ay, Bx, By) > _cutoff) return false;

	var dX = Math.abs(Bx-Ax);
	var dY = Math.abs(By-Ay);

	var Xincr, Yincr;

	if (Ax > Bx) { Xincr=-1; } else { Xincr=1; }
	if (Ay > By) { Yincr=-1; } else { Yincr=1; }

	if (dX >= dY){
		var dPr 	= dY<<1;
		var dPru 	= dPr - (dX<<1);
		var P 		= dPr - dX;
		for (; dX>=0; dX--)	{
			if (this.CollisionData[Ay-this.y][Ax-this.x] & _bit || this.CollisionData[Ay-this.y][Ax-this.x] & 0x400000)
				return false;
			if(_unit) {
				for(var ux = -1; ux < 2; ux++) {
					for(var uy = -1; uy < 2; uy++) {
						if(_unit.x == (Ax+ux) && _unit.y == (Ay+uy))
						return false;
					}
				}
			}

			if (P > 0){
				Ax+=Xincr;
				Ay+=Yincr;
				P+=dPru;
			}
			else{
				Ax+=Xincr;
				P+=dPr;
			}
		}
	}
	else{
		var dPr 	= dX<<1;
		var dPru 	= dPr - (dY<<1);
		var P 		= dPr - dY;
		for (; dY>=0; dY--)	{
			if (this.CollisionData[Ay-this.y][Ax-this.x] & _bit || this.CollisionData[Ay-this.y][Ax-this.x] & 0x400000)
				return false;
			if(_unit) {
				for(var ux = -1; ux < 2; ux++) {
					for(var uy = -1; uy < 2; uy++) {
						if(_unit.x == (Ax+ux) && _unit.y == (Ay+uy))
						return false;
					}
				}
			}
			if (P > 0){
				Ax+=Xincr;
				Ay+=Yincr;
				P+=dPru;
			}
			else{
				Ay+=Yincr;
				P+=dPr;
			}
		}
	}
	return true;
}

//////////////////////////////////////////////////////////////////////
// BotOS.Pathing.Pathable.Dump(_type, _bit)
// -------------------------------------------------------------------
// Used to Dump the map
// _type = 0 for Hex dump, 1 for visual dump
// _bit is used during visual to dump a particular bit when in visual
// mode
//////////////////////////////////////////////////////////////////////
function Pathable_Dump (_type, _bit) {
	var line = "";
	var bit = 0x1 << _bit;

	var tname = this.Name?this.Name:"NoName";

	var hFile = fileOpen("output/CollisionDumps/CollisionDataDump-" + tname + ".txt", 1);
	if(!_type) {
		for (var y = 0; y < this.Height; y++) {
			for (var x = 0; x < this.Width; x++) {
				if(this.CollisionData[y][x] != undefined)
					line += "0x" + this.CollisionData[y][x].toString(16) + " ";
				else line += "0xFFFF ";
			}
			hFile.writeLine(line);
			line = "";
		}
	}
	else if(_type == 1) {
		for (var y = 0; y < this.Height; y++) {
			line+=((this.y+y).toString(10));
			for (var x = 0; x < this.Width; x++) {

				if(this.CollisionData[y][x] & 0x400000)
					line += "D";
				else if(this.CollisionData[y][x] & bit)
					line += "X";
				else if(this.CollisionData[y][x] & 0x10000)
					line += "1";
				else if(this.CollisionData[y][x] & 0x20000)
					line += "2";
				else if(this.CollisionData[y][x] & 0x40000)
					line += "3";
				else if(this.CollisionData[y][x] & 0x80000)
					line += "4";
					else if(this.CollisionData[y][x] & 0x100000)
						line += "+";
					else if(this.CollisionData[y][x] & 0x200000)
						line += "-";
				else
					line += ".";

			}
			hFile.writeLine(line);
			line = "";
		}
	}

	hFile.close();
}

//////////////////////////////////////////////////////////////////////
// BotOS.Pathing.Pathable_SetExits()
// -------------------------------------------------------------------
// This function simply scans the edges of the map and checks for
// openeings that attach to adjacent areas. If found it adds it to a
// direction exit variuable
//////////////////////////////////////////////////////////////////////
function Pathable_SetExits() {

	var ec = new Array();
	var notdoneexit = false;
	var count = 0;
	var avgcoord = 0;

	//NORTH 	Scan for white space
	for (var x = this.x; x < this.MaxX; x++)
	{
		this.CollisionData[0][x - this.x] |= 0x400000;
		if(this.IsWalkable(x, this.y))
		{
			ec[ec.length] = {x:x, y:this.y};
			notdoneexit = true;
			continue;
		}
		else if (notdoneexit) 
		{
			if (ec.length < 4)
			{ //Too small
				notdoneexit = false;
				ec.length = 0;
				continue;
			}
			break;
		}
	}
	if (ec.length > 3) 
	{
		for(var i = 0; i < ec.length; i++) avgcoord += ec[i].x;
		this.NorthExit = this.FindClosestWalkable(Math.floor(avgcoord / ec.length), this.y+6);
	}

	//EAST 	Scan for white space
	ec = new Array();
	avgcoord = 0;

	for (var y = this.y; y < this.MaxY; y++){
		this.CollisionData[y - this.y][this.MaxX - this.x] |= 0x400000;
		if(this.IsWalkable(this.MaxX, y)){
			ec[ec.length] = {x:this.MaxX, y:y};
			notdoneexit = true;
			continue;
		}
		else if (notdoneexit) {
			if (ec.length < 4){ //Too small
				notdoneexit = false;
				ec.length = 0;
				continue;
			}
			break;
		}
	}
	if (ec.length > 3) 
	{ 
		for(var i = 0; i < ec.length; i++) avgcoord += ec[i].y;
		this.EastExit = this.FindClosestWalkable(this.MaxX-6, Math.floor(avgcoord / ec.length));
	}

	//South	Scan for white space
	ec = new Array();
	avgcoord = 0;

	for (var x = this.x; x < this.MaxX; x++){
		this.CollisionData[this.MaxY - this.y][x - this.x] |= 0x400000;
		if(this.IsWalkable(x, this.MaxY)){
			ec[ec.length] = {x:x, y:this.MaxY};
			notdoneexit = true;
			continue;
		}
		else if (notdoneexit) {
			if (ec.length < 4){ //Too small
				notdoneexit = false;
				ec.length = 0;
				continue;
			}
			break;
		}

	}
	if (ec.length > 3) 
	{
		for(var i = 0; i < ec.length; i++) avgcoord += ec[i].x;
		this.SouthExit = this.FindClosestWalkable(Math.floor(avgcoord / ec.length), this.MaxY-6);
	}

	//West 	Scan for white space
	ec = new Array();
	avgcoord = 0;

	for (var y = this.y; y < this.MaxY; y++){
		this.CollisionData[y - this.y][0] |= 0x400000;
		if(this.IsWalkable(this.x, y)){
			ec[ec.length] = {x:this.x, y:y};
			notdoneexit = true;
			continue;
		}
		else if (notdoneexit) {
			if (ec.length < 4){ //Too small
				notdoneexit = false;
				ec.length = 0;
				continue;
			}
			break;
		}
	}
	if (ec.length > 3) 
	{
		for(var i = 0; i < ec.length; i++) avgcoord += ec[i].y;
		this.WestExit = this.FindClosestWalkable(this.x+6, Math.floor(avgcoord / ec.length));
	}
}

//////////////////////////////////////////////////////////////////////
// BotOS.Pathing.Pathable.TransferCollData(_rtt)
// -------------------------------------------------------------------
// Used to transfer Data from the Rooms array to the CollisionData
// grid.
// _rtt is the element number in the Rooms array
//////////////////////////////////////////////////////////////////////
function Pathable_TransferCollData(_rtt) 
{
	BotOS.Pathing.Pathable.ArrayCopy2D(this.CollisionData, this.Rooms[_rtt].CollisionData, this.Rooms[_rtt].x-this.x, this.Rooms[_rtt].y-this.y);
}

BotOS.Pathing.Pathable.ArrayCopy2D = function (largearray, smallarray, offsetx, offsety) {
	for(var y = 0; y < smallarray.length; y++) 
	{
		for(var x = 0; x < smallarray[0].length; x++) 
		{
			largearray[offsety+y][offsetx+x] = smallarray[y][x];
		}
	}
}


function Pathable_GetRooms () {
	return this.Rooms;
}



