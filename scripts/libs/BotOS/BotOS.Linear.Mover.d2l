
//##################################################
//####    Matts Linear Framework Library 0.1   #####
//####     NOT Part of the BotOS framework     #####
//##################################################
/*

Copyright (C) 2003-2004 Matt Lanteigne aka mattlant <mattlant@hotmail.com>

----------------------------------------------------

This is free software; You can redistrubute freely as long as this
header stays intact. Modifications for personal use may be made. Modifications
for distribution to others is prohibited without written consent from
the author.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY
or FITNESS FOR A PARTICULAR PURPOSE.

Any and all code is subject to change at any time.
----------------------------------------------------



If you appreciate our work, please donate :)

https://www.paypal.com/xclick/business=mattlant%40rogers.com&item_name=mattlant+Donations&no_note=1&tax=0&currency_code=USD

*/



if(typeof(BotOS) != 'function'){
	BotOS = function () {
		throw new BotOS.NamespaceException("BotOS is a namespace and cannot be instantiated", 1);
	}
}
if(typeof(BotOS.Linear) != 'function') {
	BotOS.Linear = function () {
		throw new BotOS.NamespaceException("BotOS.Linear is a namespace and cannot be instantiated", 1);
	}
}

BotOS.Linear.Mover = function(_info) {
	
	var Callback = null;
	var Path = null;
	var Pather = null;
	var Logger = null;

	//Callback property - really only need to set it
	this.Callback setter = function (value) {
		if(!(BotOS.Variable.IsFunction(value) || !value)) 
			throw new BotOS.ArgumentException("Mover.Callback requires a valid function to be passed or a *null* value", 1, "BotOS.Linear.Mover.d2l");
		Callback = value;
	}

	//path property - added getter too in case
	this.Path setter = function (value) {
		if(!(value instanceof Array || !value)) 
			throw new BotOS.ArgumentException("Mover.Path requires a valid Path Array to be passed or a *null* value", 1, "BotOS.Linear.Mover.d2l");
		Path = value;
	}
	this.Path getter = function() { return path; }

	//pather property
	this.Pather setter = function (value) {
		if(!(value instanceof BotOS.Pathing.Pather || !value) )
			throw new BotOS.ArgumentException("Mover.Path requires a valid Path Array to be passed or a *null* value", 1, "BotOS.Linear.Mover.d2l");
		Pather = value;
	}
	this.Pather getter = function() { return Pather; }

	//logger property - only need to set it
	this.Logger setter = function (value) {
		if(!(value instanceof BotOS.Logging.Log || !value)) 
			throw new BotOS.ArgumentException("Mover.Logger requires a valid BotOS.Logging.Log object to be passed or a *null* value", 1, "BotOS.Linear.Mover.d2l");
		Logger = value;
	}





	//set the properties
	this.Callback = _info.Callback;
	this.Path = _info.Path;
	this.Pather = _info.Pather;
	this.Logger = _info.Logger;

	this.PathMove = Mover_pathmove;

	this._blockstat= "None";


	//var ptr_oMap = _ptr_oMap;


	function Mover_pathmove(pointtostart, recalcmaxdist, recalcalgotype, factor, _notele)
	{

		if(Pather) Path = Pather.Path;
		if(!pointtostart) pointtostart = 0;
		if(!recalcmaxdist) recalcmaxdist = 2;
		if(!recalcalgotype) recalcalgotype = mlASTAR;
		if(!factor) factor = 1.2;
		var failedhops = 0;
		//Quick Fix 
		var fh = mlFHMANHATTAN;
		
		for (var i=pointtostart; i<Path.length; i++)
		{
			if(Logger) Logger.Write("moving to " + Path[i].x + ", " + Path[i].y);

			if(me.classid == 1 && !mlInTown(me) && me.getSkill("Teleport") > 0 && this.Pather.UseTeleport && !_notele) var retval = mlteleportto(Path[i].x, Path[i].y, Callback, i);
			else var retval = mlwalkto(Path[i].x, Path[i].y, Callback, i);

			if (!retval)
			{
				if(!this.Pather.Pathable.IsInRange(me.x, me.y)) 
					throw new BotOS.MoverException ("Mover.Move -> We do not seem to be i the right area", 1, "BotOS.Lenear.Mover.d2l");
					//this.Pather.Pathable.InitializeMap(me.area);

				if(Logger) Logger.Write("First destination failed, attempting recalculating a course to the next coordinate");

				var midpath = this.Pather.FindPath(me.x, me.y, Path[i].x, Path[i].y, recalcmaxdist, this.Pather.UseTeleport, recalcalgotype, fh, factor);

				if (!midpath)
					throw new BotOS.MoverException("Mover.PathMove -> Couldn't recalculate a path", 1, "BotOS.Linear.Mover.d2l");
				
				for(var k = 0; k<midpath.length; k++) {
					if(me.classid == 1 && !mlInTown(me) && me.getSkill("Teleport") > 0 && this.Pather.UseTeleport && !_notele) var retval = mlteleportto(midpath[k].x, midpath[k].y, Callback, i);
					else retval = mlwalkto(midpath[k].x, midpath[k].y, Callback, i);
				}
			}

			else if (retval > mlSTEPAHEAD && retval < mlSTEPBACK) {		// step ahead
					i += (retval - mlSTEPAHEAD); continue; }
			else if (retval > mlSTEPBACK)//step back
			{
				print("(retval - mlSTEPBACK):" + (retval - mlSTEPBACK));
				for (var j = i; j > i - (retval - mlSTEPBACK); j--) {
					if(me.classid == 1 && !mlInTown(me) && me.getSkill("Teleport") > 0 && this.Pather.UseTeleport && !_notele) var retval = mlteleportto(Path[j].x, Path[j].y, Callback, i);
					else mlwalkto(Path[j].x, Path[j].y);
				}
				i -= (retval - mlSTEPBACK);
				continue;
			}
			else if (retval == mlSTOP)    				//step back
					return mlSTOP;
			if (!retval)
			{
				print("We couldnt find a way to the next path point");
				if(failedhops == 5)
					throw new BotOS.MoverException("Mover.PathMove - had five failed destinations along this path", 1, "BotOS.Linear.Mover.d2l");
				
				failedhops++;
			}
			//delay(50);
		}
		return true;
	}
}

//overridable with your own walk delay
BotOS.Linear.Mover.WalkDelay = 150;

//////////////////////////////////////////////////////////////////////
// mlwalkto(x, y, walkcallflag)
// -------------------------------------------------------------------
// walks to the given coordinates
// returns: true on success, false on failure
// requires mlMapInitializeMap: NO
//////////////////////////////////////////////////////////////////////
function mlwalkto(x, y, callback, currentpoint) //currentpoint is for internal use only
{
	var startX = me.x;
	var startY = me.y;
	var currDestX = x;
	var currDestY = y;

	if (Math.abs(me.x - x) <= 1 && Math.abs(me.y - y) <= 1) return 1;

	var trys = 0;
	var ntrys=12;
	var thrash = 0;
	var nthrash=3;
	var startX = me.x;
	var startY = me.y;
	var currDestX = x;
	var currDestY = y;
	var door;
//     this.Logger.Write("Walking to (lib)[" + x + ", " + y + "]");
//
//     if (Math.sqrt(Dist2(x, y, mdx[3], mdx[3])) > Math.sqrt(Dist2(me.x, me.y, mdx[3], mdx[3])) && midi != 3)
//         continue;
	var directionalmove=0;

	while ((Math.abs(me.x - x) > 2 || Math.abs(me.y - y) > 2) && trys <= ntrys)
	{
		mlmemove(currDestX, currDestY);
		//call optional function if true
		if (BotOS.Variable.IsFunction(callback))
		{
			var retvalin = callback(x,y, currentpoint);
			if (retvalin == mlSTEPBACK)
				mlmemove(currDestX, currDestY);
			if (retvalin > 1 && retvalin != mlSTEPBACK && retvalin != mlSTEPAHEAD)
				return retvalin;
			//Now move back where we were so we can so we can continue on
			//me.move(currDestX, currDestY);
			if (Math.abs(me.x - x) <= 2 && Math.abs(me.y - y) <= 2)
				return 1;
		}
		delay(BotOS.Linear.Mover.WalkDelay);
		trys++;
		if ((Math.abs(me.x - startX) < 3 && Math.abs(me.y - startY) < 3))
		{
			if (thrash >= nthrash)
			{
				var direction = Math.abs(Math.floor((Math.atan2(x-me.x , y-me.y)) * 180 / 3.1415) - 180);
				if (direction > 0 && direction < 45){
					currDestX = me.x+5;
					currDesty = me.y+1;
				}
				else if(direction > 45 && direction < 90) {
					currDestX = me.x-1;
					currDestY = me.y-5;
				}
				else if (direction > 90 && direction < 135){
					currDestX = me.x-1;
					currDestY = me.y+5;
				}
				else if(direction > 135 && direction < 180) {
					currDestX = me.x+5;
					currDestY = me.y-1;
				}
				else if (direction > 180 && direction < 225){
					currDestX = me.x-5;
					cuurDestY = me.y-1;
				}
				else if(direction > 225 && direction < 270) {
					currDestX = me.x+1;
					cuurDestY = me.y+5;
				}
				else if (direction > 270 && direction < 315){
					currDestX = me.x+1;
					currDestY = me.y-5;
				}
				else if(direction > 315 && direction < 360) {
					currDestX = me.x-5;
					currDestY = me.y+1;
				}
				else
				{
					//make a randome move
					var dx = currDestX - startX;
					var dy = currDestY - startY;
					var a = Math.atan2(dx, dy);
					a = Math.floor(a * 100) + 157;  // + pi/2;
					var direction = rnd(a, a+314)/100;  // + pi
					currDestX = Math.floor(Math.sin(direction)*20) + me.x;
					currDestY = Math.floor(Math.cos(direction)*20) + me.y;
				}
				directionalmove = 0;

				//########################################
				thrash=0;
				directionalmove++;
				while (me.mode !=1)
					delay(50);
			} else thrash++;
		}
		else
		{
			startX = me.x;
			startY = me.y;
			currDestX = x;
			currDestY = y;
		}

	}
	if (Math.abs(me.x - x) > 4 || Math.abs(me.y - y) > 4)
	{
		return 0;
	}
	else
	{
		return 1;
	}
}

//////////////////////////////////////////////////////////////////////
// mlteleportto(x, y, walkcallflag)
// -------------------------------------------------------------------
// teleports to the given coordinates
// returns: true on success, false on failure
// requires mlMapInitializeMap: NO
//////////////////////////////////////////////////////////////////////
function mlteleportto(x, y, walkcallflag, currentpoint) //current point is used internally
{
	var DestX = x;
	var DestY = y;

		if (walkcallflag)
		{
			var retvalin = walkcalls(x,y, currentpoint, walkcallflag);
			if(currentpoint)
			{
				if (retvalin == mlSTEPBACK)
					mlCast("Teleport",0,DestX,DestY);
				if (retvalin > 1 && retvalin != mlSTEPBACK && retvalin != mlSTEPAHEAD)
					return retvalin;
			}
		}

		for (var rv = 0; rv < 3; rv++)
		{
			mlCast("Teleport",0,x,y);

			// Check to see see if we have arrived at our destination
			if ((Math.abs(me.x - x) < 6) && (Math.abs(me.y - y) < 6))
			{
				this.Logger.Write("Teleported to [" + me.x + ", " + me.y + "]");
				break;
			}
		}

	if ((Math.abs(me.x - DestX) < 6) && (Math.abs(me.y - DestY) < 6))
		return 1;
	else
		return 0;

}

//thanks scav, njag
function mlmemove(x, y)
{
	if(parseFloat(me.version) >= 0.33)
		clickMap(0, 0, x, y);
	else
		me.move(x, y);

	var xoff = parseInt(rnd(0,12)/6) * (x - me.x<0 ? -1 : 1);
	var yoff = parseInt(rnd(0,12)/6) * (y - me.y<0 ? -1 : 1);
	delay(rnd(10,50));
	if(parseFloat(me.version) >= 0.33)
		clickMap(2, 0, x+xoff, y+yoff);
	else
		me.move(x+xoff, y+yoff);
}
